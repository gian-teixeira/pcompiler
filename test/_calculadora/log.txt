Starting __function TokenType.Function
Starting __function_name TokenType.Id
Ending __function_name Token(lexeme='calculadora', type=<TokenType.Id: 4>, line=0)
Starting __parameter_list TokenType.Id
Starting __type TokenType.Char
Ending __type DataType.Char
Starting __parameter_list_opt TokenType.Comma
Starting __type TokenType.Float
Ending __type DataType.Float
Starting __parameter_list_opt TokenType.Comma
Starting __type TokenType.Float
Ending __type DataType.Float
Starting __parameter_list_opt TokenType.RBracket
Ending __parameter_list_opt None
Ending __parameter_list_opt None
Ending __parameter_list_opt None
Ending __parameter_list None
Starting __function_return_type TokenType.Arrow
Starting __type TokenType.Float
Ending __type DataType.Float
Ending __function_return_type None
Starting __block TokenType.LBrace
Starting __sequence TokenType.If
Starting __command TokenType.If
Starting __if TokenType.If
Starting __expr TokenType.Id
Starting __rel TokenType.Id
Starting __add TokenType.Id
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.EQ
Ending __function_call Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __factor Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __term_opt TokenType.EQ
Ending __term_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __term Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __add_opt TokenType.EQ
Ending __add_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __add Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __rel_opt TokenType.EQ
Ending __rel_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __rel Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __expr_opt TokenType.EQ
Starting __op_equal TokenType.EQ
Ending __op_equal Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=None, datatype=<DataType.Int: 'int'>)
Starting __rel TokenType.CharConst
Starting __add TokenType.CharConst
Starting __term TokenType.CharConst
Starting __factor TokenType.CharConst
Ending __factor Node.CharConst(value="'+'")
Starting __term_opt TokenType.LBrace
Ending __term_opt Node.CharConst(value="'+'")
Ending __term Node.CharConst(value="'+'")
Starting __add_opt TokenType.LBrace
Ending __add_opt Node.CharConst(value="'+'")
Ending __add Node.CharConst(value="'+'")
Starting __rel_opt TokenType.LBrace
Ending __rel_opt Node.CharConst(value="'+'")
Ending __rel Node.CharConst(value="'+'")
Starting __expr_opt TokenType.LBrace
Ending __expr_opt Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'+'"), datatype=<DataType.Int: 'int'>)
Ending __expr_opt Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'+'"), datatype=<DataType.Int: 'int'>)
Ending __expr Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'+'"), datatype=<DataType.Int: 'int'>)
Starting __block TokenType.LBrace
Starting __sequence TokenType.Return
Starting __command TokenType.Return
Starting __return TokenType.Return
Starting __expr TokenType.Id
Starting __rel TokenType.Id
Starting __add TokenType.Id
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.Plus
Ending __function_call Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Ending __factor Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Starting __term_opt TokenType.Plus
Ending __term_opt Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Ending __term Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Starting __add_opt TokenType.Plus
Starting __op_add TokenType.Plus
Ending __op_add Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=None, datatype=<DataType.Float: 'float'>)
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.PComma
Ending __function_call Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Ending __factor Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Starting __term_opt TokenType.PComma
Ending __term_opt Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Ending __term Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Starting __add_opt TokenType.PComma
Ending __add_opt Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __add_opt Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __add Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Starting __rel_opt TokenType.PComma
Ending __rel_opt Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __rel Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Starting __expr_opt TokenType.PComma
Ending __expr_opt Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __expr Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __return Node.Return(expression=Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))
Ending __command Node.Return(expression=Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))
Starting __sequence TokenType.RBrace
Ending __sequence None
Ending __sequence None
Ending __block Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))])
Starting __else TokenType.Else
Starting __if TokenType.If
Starting __expr TokenType.Id
Starting __rel TokenType.Id
Starting __add TokenType.Id
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.EQ
Ending __function_call Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __factor Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __term_opt TokenType.EQ
Ending __term_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __term Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __add_opt TokenType.EQ
Ending __add_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __add Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __rel_opt TokenType.EQ
Ending __rel_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __rel Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __expr_opt TokenType.EQ
Starting __op_equal TokenType.EQ
Ending __op_equal Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=None, datatype=<DataType.Int: 'int'>)
Starting __rel TokenType.CharConst
Starting __add TokenType.CharConst
Starting __term TokenType.CharConst
Starting __factor TokenType.CharConst
Ending __factor Node.CharConst(value="'-'")
Starting __term_opt TokenType.LBrace
Ending __term_opt Node.CharConst(value="'-'")
Ending __term Node.CharConst(value="'-'")
Starting __add_opt TokenType.LBrace
Ending __add_opt Node.CharConst(value="'-'")
Ending __add Node.CharConst(value="'-'")
Starting __rel_opt TokenType.LBrace
Ending __rel_opt Node.CharConst(value="'-'")
Ending __rel Node.CharConst(value="'-'")
Starting __expr_opt TokenType.LBrace
Ending __expr_opt Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'-'"), datatype=<DataType.Int: 'int'>)
Ending __expr_opt Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'-'"), datatype=<DataType.Int: 'int'>)
Ending __expr Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'-'"), datatype=<DataType.Int: 'int'>)
Starting __block TokenType.LBrace
Starting __sequence TokenType.Return
Starting __command TokenType.Return
Starting __return TokenType.Return
Starting __expr TokenType.Id
Starting __rel TokenType.Id
Starting __add TokenType.Id
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.Minus
Ending __function_call Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Ending __factor Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Starting __term_opt TokenType.Minus
Ending __term_opt Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Ending __term Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Starting __add_opt TokenType.Minus
Starting __op_add TokenType.Minus
Ending __op_add Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=None, datatype=<DataType.Float: 'float'>)
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.PComma
Ending __function_call Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Ending __factor Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Starting __term_opt TokenType.PComma
Ending __term_opt Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Ending __term Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Starting __add_opt TokenType.PComma
Ending __add_opt Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __add_opt Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __add Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Starting __rel_opt TokenType.PComma
Ending __rel_opt Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __rel Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Starting __expr_opt TokenType.PComma
Ending __expr_opt Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __expr Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __return Node.Return(expression=Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))
Ending __command Node.Return(expression=Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))
Starting __sequence TokenType.RBrace
Ending __sequence None
Ending __sequence None
Ending __block Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))])
Starting __else TokenType.Else
Starting __if TokenType.If
Starting __expr TokenType.Id
Starting __rel TokenType.Id
Starting __add TokenType.Id
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.EQ
Ending __function_call Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __factor Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __term_opt TokenType.EQ
Ending __term_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __term Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __add_opt TokenType.EQ
Ending __add_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __add Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __rel_opt TokenType.EQ
Ending __rel_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __rel Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __expr_opt TokenType.EQ
Starting __op_equal TokenType.EQ
Ending __op_equal Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=None, datatype=<DataType.Int: 'int'>)
Starting __rel TokenType.CharConst
Starting __add TokenType.CharConst
Starting __term TokenType.CharConst
Starting __factor TokenType.CharConst
Ending __factor Node.CharConst(value="'*'")
Starting __term_opt TokenType.LBrace
Ending __term_opt Node.CharConst(value="'*'")
Ending __term Node.CharConst(value="'*'")
Starting __add_opt TokenType.LBrace
Ending __add_opt Node.CharConst(value="'*'")
Ending __add Node.CharConst(value="'*'")
Starting __rel_opt TokenType.LBrace
Ending __rel_opt Node.CharConst(value="'*'")
Ending __rel Node.CharConst(value="'*'")
Starting __expr_opt TokenType.LBrace
Ending __expr_opt Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>)
Ending __expr_opt Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>)
Ending __expr Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>)
Starting __block TokenType.LBrace
Starting __sequence TokenType.Return
Starting __command TokenType.Return
Starting __return TokenType.Return
Starting __expr TokenType.Id
Starting __rel TokenType.Id
Starting __add TokenType.Id
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.Mult
Ending __function_call Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Ending __factor Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Starting __term_opt TokenType.Mult
Starting __op_mult TokenType.Mult
Ending __op_mult Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=None, datatype=<DataType.Float: 'float'>)
Starting __factor TokenType.Id
Starting __function_call TokenType.PComma
Ending __function_call Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Ending __factor Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Starting __term_opt TokenType.PComma
Ending __term_opt Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __term_opt Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __term Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Starting __add_opt TokenType.PComma
Ending __add_opt Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __add Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Starting __rel_opt TokenType.PComma
Ending __rel_opt Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __rel Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Starting __expr_opt TokenType.PComma
Ending __expr_opt Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __expr Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __return Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))
Ending __command Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))
Starting __sequence TokenType.RBrace
Ending __sequence None
Ending __sequence None
Ending __block Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))])
Starting __else TokenType.Else
Starting __if TokenType.If
Starting __expr TokenType.Id
Starting __rel TokenType.Id
Starting __add TokenType.Id
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.EQ
Ending __function_call Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __factor Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __term_opt TokenType.EQ
Ending __term_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __term Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __add_opt TokenType.EQ
Ending __add_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __add Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __rel_opt TokenType.EQ
Ending __rel_opt Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Ending __rel Node.Id(name='op', datatype=<DataType.Char: 'char'>)
Starting __expr_opt TokenType.EQ
Starting __op_equal TokenType.EQ
Ending __op_equal Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=None, datatype=<DataType.Int: 'int'>)
Starting __rel TokenType.CharConst
Starting __add TokenType.CharConst
Starting __term TokenType.CharConst
Starting __factor TokenType.CharConst
Ending __factor Node.CharConst(value="'/'")
Starting __term_opt TokenType.LBrace
Ending __term_opt Node.CharConst(value="'/'")
Ending __term Node.CharConst(value="'/'")
Starting __add_opt TokenType.LBrace
Ending __add_opt Node.CharConst(value="'/'")
Ending __add Node.CharConst(value="'/'")
Starting __rel_opt TokenType.LBrace
Ending __rel_opt Node.CharConst(value="'/'")
Ending __rel Node.CharConst(value="'/'")
Starting __expr_opt TokenType.LBrace
Ending __expr_opt Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>)
Ending __expr_opt Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>)
Ending __expr Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>)
Starting __block TokenType.LBrace
Starting __sequence TokenType.If
Starting __command TokenType.If
Starting __if TokenType.If
Starting __expr TokenType.Id
Starting __rel TokenType.Id
Starting __add TokenType.Id
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.EQ
Ending __function_call Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Ending __factor Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Starting __term_opt TokenType.EQ
Ending __term_opt Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Ending __term Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Starting __add_opt TokenType.EQ
Ending __add_opt Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Ending __add Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Starting __rel_opt TokenType.EQ
Ending __rel_opt Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Ending __rel Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Starting __expr_opt TokenType.EQ
Starting __op_equal TokenType.EQ
Ending __op_equal Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=None, datatype=<DataType.Int: 'int'>)
Starting __rel TokenType.FloatConst
Starting __add TokenType.FloatConst
Starting __term TokenType.FloatConst
Starting __factor TokenType.FloatConst
Ending __factor Node.FloatConst(value=0.0)
Starting __term_opt TokenType.LBrace
Ending __term_opt Node.FloatConst(value=0.0)
Ending __term Node.FloatConst(value=0.0)
Starting __add_opt TokenType.LBrace
Ending __add_opt Node.FloatConst(value=0.0)
Ending __add Node.FloatConst(value=0.0)
Starting __rel_opt TokenType.LBrace
Ending __rel_opt Node.FloatConst(value=0.0)
Ending __rel Node.FloatConst(value=0.0)
Starting __expr_opt TokenType.LBrace
Ending __expr_opt Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>)
Ending __expr_opt Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>)
Ending __expr Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>)
Starting __block TokenType.LBrace
Starting __sequence TokenType.Return
Starting __command TokenType.Return
Starting __return TokenType.Return
Starting __expr TokenType.FloatConst
Starting __rel TokenType.FloatConst
Starting __add TokenType.FloatConst
Starting __term TokenType.FloatConst
Starting __factor TokenType.FloatConst
Ending __factor Node.FloatConst(value=0.0)
Starting __term_opt TokenType.PComma
Ending __term_opt Node.FloatConst(value=0.0)
Ending __term Node.FloatConst(value=0.0)
Starting __add_opt TokenType.PComma
Ending __add_opt Node.FloatConst(value=0.0)
Ending __add Node.FloatConst(value=0.0)
Starting __rel_opt TokenType.PComma
Ending __rel_opt Node.FloatConst(value=0.0)
Ending __rel Node.FloatConst(value=0.0)
Starting __expr_opt TokenType.PComma
Ending __expr_opt Node.FloatConst(value=0.0)
Ending __expr Node.FloatConst(value=0.0)
Ending __return Node.Return(expression=Node.FloatConst(value=0.0))
Ending __command Node.Return(expression=Node.FloatConst(value=0.0))
Starting __sequence TokenType.RBrace
Ending __sequence None
Ending __sequence None
Ending __block Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))])
Starting __else TokenType.Return
Ending __else None
Ending __if Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None)
Ending __command Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None)
Starting __sequence TokenType.Return
Starting __command TokenType.Return
Starting __return TokenType.Return
Starting __expr TokenType.Id
Starting __rel TokenType.Id
Starting __add TokenType.Id
Starting __term TokenType.Id
Starting __factor TokenType.Id
Starting __function_call TokenType.Div
Ending __function_call Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Ending __factor Node.Id(name='x', datatype=<DataType.Float: 'float'>)
Starting __term_opt TokenType.Div
Starting __op_mult TokenType.Div
Ending __op_mult Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=None, datatype=<DataType.Float: 'float'>)
Starting __factor TokenType.Id
Starting __function_call TokenType.PComma
Ending __function_call Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Ending __factor Node.Id(name='y', datatype=<DataType.Float: 'float'>)
Starting __term_opt TokenType.PComma
Ending __term_opt Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __term_opt Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __term Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Starting __add_opt TokenType.PComma
Ending __add_opt Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __add Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Starting __rel_opt TokenType.PComma
Ending __rel_opt Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __rel Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Starting __expr_opt TokenType.PComma
Ending __expr_opt Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __expr Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>)
Ending __return Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))
Ending __command Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))
Starting __sequence TokenType.RBrace
Ending __sequence None
Ending __sequence None
Ending __sequence None
Ending __block Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))])
Starting __else TokenType.Return
Ending __else None
Ending __if Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=None)
Ending __else Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=None)
Ending __if Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=None))
Ending __else Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=None))
Ending __if Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'-'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=None)))
Ending __else Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'-'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=None)))
Ending __if Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'+'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'-'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=None))))
Ending __command Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'+'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'-'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=None))))
Starting __sequence TokenType.Return
Starting __command TokenType.Return
Starting __return TokenType.Return
Starting __expr TokenType.FloatConst
Starting __rel TokenType.FloatConst
Starting __add TokenType.FloatConst
Starting __term TokenType.FloatConst
Starting __factor TokenType.FloatConst
Ending __factor Node.FloatConst(value=0.0)
Starting __term_opt TokenType.PComma
Ending __term_opt Node.FloatConst(value=0.0)
Ending __term Node.FloatConst(value=0.0)
Starting __add_opt TokenType.PComma
Ending __add_opt Node.FloatConst(value=0.0)
Ending __add Node.FloatConst(value=0.0)
Starting __rel_opt TokenType.PComma
Ending __rel_opt Node.FloatConst(value=0.0)
Ending __rel Node.FloatConst(value=0.0)
Starting __expr_opt TokenType.PComma
Ending __expr_opt Node.FloatConst(value=0.0)
Ending __expr Node.FloatConst(value=0.0)
Ending __return Node.Return(expression=Node.FloatConst(value=0.0))
Ending __command Node.Return(expression=Node.FloatConst(value=0.0))
Starting __sequence TokenType.RBrace
Ending __sequence None
Ending __sequence None
Ending __sequence None
Ending __block Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'+'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'-'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=None)))), Node.Return(expression=Node.FloatConst(value=0.0))])
Ending __function Node.Function(name='calculadora', block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'+'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='+', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'-'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='-', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'*'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.AritOp(signal='*', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='op', datatype=<DataType.Char: 'char'>), right=Node.CharConst(value="'/'"), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.If(condition=Node.RelOp(signal='==', left=Node.Id(name='y', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=0.0), datatype=<DataType.Int: 'int'>), block=Node.Block(expressions=[Node.Return(expression=Node.FloatConst(value=0.0))]), else_=None), Node.Return(expression=Node.AritOp(signal='/', left=Node.Id(name='x', datatype=<DataType.Float: 'float'>), right=Node.Id(name='y', datatype=<DataType.Float: 'float'>), datatype=<DataType.Float: 'float'>))]), else_=None)))), Node.Return(expression=Node.FloatConst(value=0.0))]), parameters=[Node.Id(name='op', datatype=<DataType.Char: 'char'>), Node.Id(name='x', datatype=<DataType.Float: 'float'>), Node.Id(name='y', datatype=<DataType.Float: 'float'>)])
Starting __function_sequence TokenType.Function
Starting __function TokenType.Function
Starting __function_name TokenType.Main
Ending __function_name Token(lexeme='main', type=<TokenType.Main: 37>, line=19)
Starting __parameter_list TokenType.RBracket
Ending __parameter_list None
Starting __function_return_type TokenType.LBrace
Ending __function_return_type None
Starting __block TokenType.LBrace
Starting __sequence TokenType.Let
Starting __declaration TokenType.Let
Starting __var_list TokenType.Id
Starting __var_list_opt TokenType.Comma
Starting __var_list_opt TokenType.Colon
Ending __var_list_opt []
Ending __var_list_opt [Token(lexeme='b', type=<TokenType.Id: 4>, line=20)]
Ending __var_list [Token(lexeme='a', type=<TokenType.Id: 4>, line=20), Token(lexeme='b', type=<TokenType.Id: 4>, line=20)]
Starting __type TokenType.Float
Ending __type DataType.Float
Ending __declaration None
Starting __sequence TokenType.Id
Starting __command TokenType.Id
Starting __attr_or_call TokenType.Attr
Starting __expr TokenType.FloatConst
Starting __rel TokenType.FloatConst
Starting __add TokenType.FloatConst
Starting __term TokenType.FloatConst
Starting __factor TokenType.FloatConst
Ending __factor Node.FloatConst(value=1.8)
Starting __term_opt TokenType.PComma
Ending __term_opt Node.FloatConst(value=1.8)
Ending __term Node.FloatConst(value=1.8)
Starting __add_opt TokenType.PComma
Ending __add_opt Node.FloatConst(value=1.8)
Ending __add Node.FloatConst(value=1.8)
Starting __rel_opt TokenType.PComma
Ending __rel_opt Node.FloatConst(value=1.8)
Ending __rel Node.FloatConst(value=1.8)
Starting __expr_opt TokenType.PComma
Ending __expr_opt Node.FloatConst(value=1.8)
Ending __expr Node.FloatConst(value=1.8)
Ending __attr_or_call Node.Assign(left=Node.Id(name='a', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=1.8))
Ending __command Node.Assign(left=Node.Id(name='a', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=1.8))
Starting __sequence TokenType.Id
Starting __command TokenType.Id
Starting __attr_or_call TokenType.Attr
Starting __expr TokenType.FloatConst
Starting __rel TokenType.FloatConst
Starting __add TokenType.FloatConst
Starting __term TokenType.FloatConst
Starting __factor TokenType.FloatConst
Ending __factor Node.FloatConst(value=7.2)
Starting __term_opt TokenType.PComma
Ending __term_opt Node.FloatConst(value=7.2)
Ending __term Node.FloatConst(value=7.2)
Starting __add_opt TokenType.PComma
Ending __add_opt Node.FloatConst(value=7.2)
Ending __add Node.FloatConst(value=7.2)
Starting __rel_opt TokenType.PComma
Ending __rel_opt Node.FloatConst(value=7.2)
Ending __rel Node.FloatConst(value=7.2)
Starting __expr_opt TokenType.PComma
Ending __expr_opt Node.FloatConst(value=7.2)
Ending __expr Node.FloatConst(value=7.2)
Ending __attr_or_call Node.Assign(left=Node.Id(name='b', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=7.2))
Ending __command Node.Assign(left=Node.Id(name='b', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=7.2))
Starting __sequence TokenType.Println
Starting __command TokenType.Println
Starting __println TokenType.Println
Starting __arg_list TokenType.Id
Starting __arg TokenType.Id
Starting __function_call TokenType.LBracket
Starting __arg_list TokenType.CharConst
Starting __arg TokenType.CharConst
Ending __arg Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'")])
Starting __arg_list_opt TokenType.Comma
Starting __arg TokenType.Id
Starting __function_call TokenType.Comma
Ending __function_call Node.Id(name='a', datatype=<DataType.Float: 'float'>)
Ending __arg Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>)])
Starting __arg_list_opt TokenType.Comma
Starting __arg TokenType.Id
Starting __function_call TokenType.RBracket
Ending __function_call Node.Id(name='b', datatype=<DataType.Float: 'float'>)
Ending __arg Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])
Starting __arg_list_opt TokenType.RBracket
Ending __arg_list_opt Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])
Ending __arg_list_opt Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])
Ending __arg_list_opt Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])
Ending __arg_list Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])
Ending __function_call Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])
Ending __arg Node.Print(format_string='"{}"', args=[Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])])
Starting __arg_list_opt TokenType.RBracket
Ending __arg_list_opt Node.Print(format_string='"{}"', args=[Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])])
Ending __arg_list Node.Print(format_string='"{}"', args=[Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])])
Ending __println Node.Print(format_string='"{}"', args=[Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])])
Ending __command Node.Print(format_string='"{}"', args=[Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])])
Starting __sequence TokenType.RBrace
Ending __sequence None
Ending __sequence None
Ending __sequence None
Ending __sequence None
Ending __sequence None
Ending __block Node.Block(expressions=[Node.Assign(left=Node.Id(name='a', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=1.8)), Node.Assign(left=Node.Id(name='b', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=7.2)), Node.Print(format_string='"{}"', args=[Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])])])
Ending __function Node.Function(name='main', block=Node.Block(expressions=[Node.Assign(left=Node.Id(name='a', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=1.8)), Node.Assign(left=Node.Id(name='b', datatype=<DataType.Float: 'float'>), right=Node.FloatConst(value=7.2)), Node.Print(format_string='"{}"', args=[Node.Call(function='calculadora', datatype=<DataType.Float: 'float'>, args=[Node.CharConst(value="'*'"), Node.Id(name='a', datatype=<DataType.Float: 'float'>), Node.Id(name='b', datatype=<DataType.Float: 'float'>)])])]), parameters=[])
Starting __function_sequence TokenType.EOF
Ending __function_sequence None
Ending __function_sequence None
