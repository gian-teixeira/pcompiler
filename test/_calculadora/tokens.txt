Token(lexeme='fn', type=<TokenType.Function: 35>, line=0)
Token(lexeme='calculadora', type=<TokenType.Id: 4>, line=0)
Token(lexeme='(', type=<TokenType.LBracket: 11>, line=0)
Token(lexeme='op', type=<TokenType.Id: 4>, line=0)
Token(lexeme=':', type=<TokenType.Colon: 17>, line=0)
Token(lexeme='char', type=<TokenType.Char: 7>, line=0)
Token(lexeme=',', type=<TokenType.Comma: 18>, line=0)
Token(lexeme='x', type=<TokenType.Id: 4>, line=0)
Token(lexeme=':', type=<TokenType.Colon: 17>, line=0)
Token(lexeme='float', type=<TokenType.Float: 6>, line=0)
Token(lexeme=',', type=<TokenType.Comma: 18>, line=0)
Token(lexeme='y', type=<TokenType.Id: 4>, line=0)
Token(lexeme=':', type=<TokenType.Colon: 17>, line=0)
Token(lexeme='float', type=<TokenType.Float: 6>, line=0)
Token(lexeme=')', type=<TokenType.RBracket: 12>, line=0)
Token(lexeme='->', type=<TokenType.Arrow: 41>, line=0)
Token(lexeme='float', type=<TokenType.Float: 6>, line=0)
Token(lexeme='{', type=<TokenType.LBrace: 13>, line=0)
Token(lexeme='if', type=<TokenType.If: 32>, line=1)
Token(lexeme='op', type=<TokenType.Id: 4>, line=1)
Token(lexeme='==', type=<TokenType.EQ: 26>, line=1)
Token(lexeme="'+'", type=<TokenType.CharConst: 10>, line=1)
Token(lexeme='{', type=<TokenType.LBrace: 13>, line=1)
Token(lexeme='return', type=<TokenType.Return: 36>, line=2)
Token(lexeme='x', type=<TokenType.Id: 4>, line=2)
Token(lexeme='+', type=<TokenType.Plus: 22>, line=2)
Token(lexeme='y', type=<TokenType.Id: 4>, line=2)
Token(lexeme=';', type=<TokenType.PComma: 19>, line=2)
Token(lexeme='}', type=<TokenType.RBrace: 14>, line=3)
Token(lexeme='else', type=<TokenType.Else: 33>, line=4)
Token(lexeme='if', type=<TokenType.If: 32>, line=4)
Token(lexeme='op', type=<TokenType.Id: 4>, line=4)
Token(lexeme='==', type=<TokenType.EQ: 26>, line=4)
Token(lexeme="'-'", type=<TokenType.CharConst: 10>, line=4)
Token(lexeme='{', type=<TokenType.LBrace: 13>, line=4)
Token(lexeme='return', type=<TokenType.Return: 36>, line=5)
Token(lexeme='x', type=<TokenType.Id: 4>, line=5)
Token(lexeme='-', type=<TokenType.Minus: 23>, line=5)
Token(lexeme='y', type=<TokenType.Id: 4>, line=5)
Token(lexeme=';', type=<TokenType.PComma: 19>, line=5)
Token(lexeme='}', type=<TokenType.RBrace: 14>, line=6)
Token(lexeme='else', type=<TokenType.Else: 33>, line=7)
Token(lexeme='if', type=<TokenType.If: 32>, line=7)
Token(lexeme='op', type=<TokenType.Id: 4>, line=7)
Token(lexeme='==', type=<TokenType.EQ: 26>, line=7)
Token(lexeme="'*'", type=<TokenType.CharConst: 10>, line=7)
Token(lexeme='{', type=<TokenType.LBrace: 13>, line=7)
Token(lexeme='return', type=<TokenType.Return: 36>, line=8)
Token(lexeme='x', type=<TokenType.Id: 4>, line=8)
Token(lexeme='*', type=<TokenType.Mult: 24>, line=8)
Token(lexeme='y', type=<TokenType.Id: 4>, line=8)
Token(lexeme=';', type=<TokenType.PComma: 19>, line=8)
Token(lexeme='}', type=<TokenType.RBrace: 14>, line=9)
Token(lexeme='else', type=<TokenType.Else: 33>, line=10)
Token(lexeme='if', type=<TokenType.If: 32>, line=10)
Token(lexeme='op', type=<TokenType.Id: 4>, line=10)
Token(lexeme='==', type=<TokenType.EQ: 26>, line=10)
Token(lexeme="'/'", type=<TokenType.CharConst: 10>, line=10)
Token(lexeme='{', type=<TokenType.LBrace: 13>, line=10)
Token(lexeme='if', type=<TokenType.If: 32>, line=11)
Token(lexeme='y', type=<TokenType.Id: 4>, line=11)
Token(lexeme='==', type=<TokenType.EQ: 26>, line=11)
Token(lexeme='0.0', type=<TokenType.FloatConst: 9>, line=11)
Token(lexeme='{', type=<TokenType.LBrace: 13>, line=11)
Token(lexeme='return', type=<TokenType.Return: 36>, line=12)
Token(lexeme='0.0', type=<TokenType.FloatConst: 9>, line=12)
Token(lexeme=';', type=<TokenType.PComma: 19>, line=12)
Token(lexeme='}', type=<TokenType.RBrace: 14>, line=13)
Token(lexeme='return', type=<TokenType.Return: 36>, line=14)
Token(lexeme='x', type=<TokenType.Id: 4>, line=14)
Token(lexeme='/', type=<TokenType.Div: 25>, line=14)
Token(lexeme='y', type=<TokenType.Id: 4>, line=14)
Token(lexeme=';', type=<TokenType.PComma: 19>, line=14)
Token(lexeme='}', type=<TokenType.RBrace: 14>, line=15)
Token(lexeme='return', type=<TokenType.Return: 36>, line=16)
Token(lexeme='0.0', type=<TokenType.FloatConst: 9>, line=16)
Token(lexeme=';', type=<TokenType.PComma: 19>, line=16)
Token(lexeme='}', type=<TokenType.RBrace: 14>, line=17)
Token(lexeme='fn', type=<TokenType.Function: 35>, line=19)
Token(lexeme='main', type=<TokenType.Main: 37>, line=19)
Token(lexeme='(', type=<TokenType.LBracket: 11>, line=19)
Token(lexeme=')', type=<TokenType.RBracket: 12>, line=19)
Token(lexeme='{', type=<TokenType.LBrace: 13>, line=19)
Token(lexeme='let', type=<TokenType.Let: 39>, line=20)
Token(lexeme='a', type=<TokenType.Id: 4>, line=20)
Token(lexeme=',', type=<TokenType.Comma: 18>, line=20)
Token(lexeme='b', type=<TokenType.Id: 4>, line=20)
Token(lexeme=':', type=<TokenType.Colon: 17>, line=20)
Token(lexeme='float', type=<TokenType.Float: 6>, line=20)
Token(lexeme=';', type=<TokenType.PComma: 19>, line=20)
Token(lexeme='a', type=<TokenType.Id: 4>, line=21)
Token(lexeme='=', type=<TokenType.Attr: 20>, line=21)
Token(lexeme='1.8', type=<TokenType.FloatConst: 9>, line=21)
Token(lexeme=';', type=<TokenType.PComma: 19>, line=21)
Token(lexeme='b', type=<TokenType.Id: 4>, line=22)
Token(lexeme='=', type=<TokenType.Attr: 20>, line=22)
Token(lexeme='7.2', type=<TokenType.FloatConst: 9>, line=22)
Token(lexeme=';', type=<TokenType.PComma: 19>, line=22)
Token(lexeme='println', type=<TokenType.Println: 38>, line=23)
Token(lexeme='(', type=<TokenType.LBracket: 11>, line=23)
Token(lexeme='"{}"', type=<TokenType.FormatString: 40>, line=23)
Token(lexeme=',', type=<TokenType.Comma: 18>, line=23)
Token(lexeme='calculadora', type=<TokenType.Id: 4>, line=23)
Token(lexeme='(', type=<TokenType.LBracket: 11>, line=23)
Token(lexeme="'*'", type=<TokenType.CharConst: 10>, line=23)
Token(lexeme=',', type=<TokenType.Comma: 18>, line=23)
Token(lexeme='a', type=<TokenType.Id: 4>, line=23)
Token(lexeme=',', type=<TokenType.Comma: 18>, line=23)
Token(lexeme='b', type=<TokenType.Id: 4>, line=23)
Token(lexeme=')', type=<TokenType.RBracket: 12>, line=23)
Token(lexeme=')', type=<TokenType.RBracket: 12>, line=23)
Token(lexeme=';', type=<TokenType.PComma: 19>, line=23)
Token(lexeme='}', type=<TokenType.RBrace: 14>, line=24)
